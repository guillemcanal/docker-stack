#!/bin/bash

network_initialize() {
    hash nmcli 2>/dev/null || { echo >&2 "nmcli is required but it's not installed, aborting."; exit 1; }
    
    hash ip 2>/dev/null || { echo >&2 "ip is required but it's not installed, aborting."; exit 1; }
    
    if [ ! -f /etc/NetworkManager/NetworkManager.conf ]; then
        echo "cannot find NetworkManager.conf, abording."; exit 1
    fi

    # get the default interface name
    # @todo fail if no default interface is available
    NIC=$(ip -o -4 route show to default | awk '{print $5}')
    
    # get the default interface UUID 
    UUID=$(nmcli -f UUID,DEVICE connection | grep $NIC | awk '{ print $1 }')
}

network_before_enable() {
    _disable_system_dnsmasq
}

network_enable() {
    nmcli connection modify $UUID ipv4.ignore-auto-dns yes
    nmcli connection modify $UUID ipv4.dns 127.0.0.1
    _restart_interface
}

network_disable() {
    nmcli -f ipv4 connection modify $UUID ipv4.ignore-auto-dns no
    _enable_system_dnsmasq
}

network_local_ip() {
    ip route get 8.8.8.8 | head -1 | cut -d' ' -f8
}

_enable_system_dnsmasq() {
    sudo sed -i 's/^#dns=dnsmasq/dns=dnsmasq/' /etc/NetworkManager/NetworkManager.conf
    sudo service network-manager restart
}

_disable_system_dnsmasq() {
    sudo sed -i 's/^dns=dnsmasq/#dns=dnsmasq/' /etc/NetworkManager/NetworkManager.conf
    sudo service network-manager restart
    sudo killall dnsmasq &> /dev/null || true
}

_restart_interface() {
    nmcli device disconnect $NIC
    nmcli device connect $NIC
}