#!/bin/bash

set -e pipefail

network_initialize() {
    SNAME=$(_get_active_connection)
}

network_before_enable() {
    # nothing to do
    return
}

network_enable() {
    # @todo check if local dns is already active
    # @todo get default DNS address
    echo " ---> replace DNS servers"
    sudo networksetup -setdnsservers $SNAME 127.0.0.1 192.168.1.1
    _flush_dns_cache
}

network_disable() {
    echo " ---> default DNS servers"
    sudo networksetup -setdnsservers $SNAME Empty
    _flush_dns_cache
}

network_local_ip() {
    ip route get 8.8.8.8 | head -1 | cut -d' ' -f8
}

network_local_dns() {
    nslookup localhost | head -n1 | awk '{ print $2 }'
}

network_add_root_ca() {
    local CERT_FILE="$__root/data/ssl/rootCA.pem"

    [ -f "$CERT_FILE" ] || {
        err "[error] generate a root certificate first, abording"
        exit 1
    }

    sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain "$CERT_FILE"
}

_not_implemented() {
    echo "[error] \"$__cmd\" is not yet implemented on osx. abording"
    exit 1
}

_flush_dns_cache() {
    echo " ---> flush cache"
    sudo killall -HUP mDNSResponder
}

_get_active_connection() {
    services=$(networksetup -listnetworkserviceorder | grep 'Hardware Port')

    while read line; do
        sname=$(echo $line | awk -F  "(, )|(: )|[)]" '{print $2}')
        sdev=$(echo $line | awk -F  "(, )|(: )|[)]" '{print $4}')

        if [ -n "$sdev" ]; then
            ifout=$(ifconfig $sdev 2>&1)
            if echo "$ifout" | grep "status: active" > /dev/null; then
                echo "$sname"
                return
            fi
        fi
    done <<< "$(echo "$services")"
    
    echo "[error] no active connection found, abording."
    exit 1
}