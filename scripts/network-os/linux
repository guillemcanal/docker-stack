#!/bin/bash

set -oe pipefail

network_initialize() {

    if ! [ -x "$(command -v nmcli)" ];then
        echo >&2 "[error] The nmcli cli utility is required but it's not installed, aborting."
        exit 1
    fi

    if ! [ -x "$(command -v ip)" ];then
        echo >&2 "[error] The ip cli utility is required but it's not installed, aborting"
        exit 1
    fi

    if ! [ -f /etc/NetworkManager/NetworkManager.conf ]; then
        echo >&2 "[error] Cannot find NetworkManager.conf, abording."; exit 1
    fi

    INTERFACE_NAME=$(ip -o -4 route show to default | awk '{print $5}')
    if ! [ -n "$INTERFACE_NAME" ];then
        echo >&2 "[error] Unable to dertermine your default network interface. Are your connected to the Internet ?"
        exit 1
    fi
}

network_before_enable() {
    _disable_system_dnsmasq
}

network_enable() {
    nmcli con mod $INTERFACE_NAME connection.autoconnect yes
    nmcli con mod $INTERFACE_NAME ipv4.ignore-auto-dns yes
    nmcli con mod $INTERFACE_NAME ipv4.dns 127.0.0.1
    _restart_interface
}

network_disable() {
    nmcli con mod $INTERFACE_NAME connection.autoconnect yes
    nmcli con mod $INTERFACE_NAME ipv4.ignore-auto-dns no
    nmcli con mod $INTERFACE_NAME ipv4.dns ""
    _enable_system_dnsmasq
}

network_local_ip() {
    ip route get 8.8.8.8 | head -1 | cut -d' ' -f8
}

network_local_dns() {
    sleep 5
    nslookup localhost | head -n1 | awk '{ print $2 }'
}

network_add_root_ca() {
    if ! [ -f "$__root/data/ssl/rootCA.pem" ];then
        echo >&2 "[error] generate a root certificate first, abording"
        exit 1
    fi

    if ! [ -f "/usr/local/share/ca-certificates/docker-stack-root-ca.crt" ];then
        echo " ---> adding the root certificate in your trusted root certificates"
        sudo cp $__root/data/ssl/rootCA.pem /usr/local/share/ca-certificates/docker-stack-root-ca.crt
        sudo update-ca-certificates --fresh
        
        echo "[warn] register the root certificate $__root/data/ssl/rootCA.pem in your browser"
        read -rsp $' ---> press any key to continue...\n' -n1 key
    fi
}

_enable_system_dnsmasq() {
    sudo sed -i 's/^#dns=dnsmasq/dns=dnsmasq/' /etc/NetworkManager/NetworkManager.conf
    sudo service network-manager restart
}

_disable_system_dnsmasq() {
    sudo sed -i 's/^dns=dnsmasq/#dns=dnsmasq/' /etc/NetworkManager/NetworkManager.conf
    sudo service network-manager restart
    sudo killall dnsmasq &> /dev/null || true
}

_restart_interface() {
    nmcli device disconnect $INTERFACE_NAME
    nmcli device connect $INTERFACE_NAME
}